# -*- coding: utf-8 -*-
"""EVIDENCIA 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ei5xGNrT5DZAfJpOicaaDRlzk3Mg2rN7
"""
import csv
import datetime
import re
from prettytable import PrettyTable
ultimo_folio=0
import xlsxwriter
notas = {}
notas_canceladas = {}

def guardar_datos_csv():
    with open('notas.csv', mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Folio', 'Fecha', 'Cliente', 'Correo', 'RFC', 'Detalle'])
        for folio, (fecha, cliente, correo, rfc, detalle_nota) in notas.items():
            detalle_str = '|'.join([f'{servicio}:{monto}' for servicio, monto in detalle_nota])
            writer.writerow([folio, fecha, cliente, correo, rfc, detalle_str])

def cargar_datos_csv():
    try:
        with open('notas.csv', mode='r') as file:
            reader = csv.reader(file)
            header = next(reader)
            for row in reader:
                folio, fecha, cliente, correo, rfc, detalle_str = row
                detalle_nota = [item.split(':') for item in detalle_str.split('|')]
                detalle_nota = [(item[0], float(item[1])) for item in detalle_nota]
                notas[int(folio)] = (datetime.datetime.strptime(fecha, "%Y-%m-%d").date(), cliente, correo, rfc, detalle_nota)
    except FileNotFoundError:
        print("\n** NO SE ENCONTRO NINGUN ARCHIVO. ES PARTE DE UN ESTADO INICIAL VACÍO **")


def validar_correo(correo):
    patron = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    if re.match(patron, correo):
        return True
    else:
        return False

def validar_rfc(rfc):
    patron = r'^[A-Z]{4}[0-9]{6}[A-Z0-9]{3}$'
    if re.match(patron, rfc):
        return True
    else:
        return False

def validar_monto(monto_str):
    try:
        monto = float(monto_str)
        return monto >= 0.01
    except ValueError:
        return False
    return False


def registrar_notas():
    nuevo_folio = ultimo_folio + 1
    total=0



    while True:
        print('\n   REGISTRA UNA NUEVA NOTA')
        detalle_nota = []
        print('\nNota: Escriba (salir) si desea volver al menú principal')
        while True:
            cliente = validacion_txt('\nIngrese el nombre del cliente: ')
            if cliente.lower() == 'salir':
                print('\n** OPERACION CANCELADA, VOLVIENDO AL MENÚ PRINCIPAL **')
                return
            elif cliente:
                break


        while True:
            try:
                fecha = input('\nIngrese la fecha en formato DD/MM/YYYY: ')
                fecha_actual = datetime.date.today()
                fecha = datetime.datetime.strptime(fecha, "%d/%m/%Y").date()
                if fecha > fecha_actual:
                    print('\n** LA FECHA INGRESADA NO DEBE SER POSTERIOR A LA FECHA ACTUAL, INGRESE UNA FECHA VÁLIDA **')
                else:
                    break
            except ValueError:
                print('* EL FORMATO DE FECHA NO ES VÁLIDO, INGRESE LA FECHA EN FORMATO DD/MM/YYYY *')

        fecha_formateada = fecha.strftime("%d/%m/%Y")
        while True:
            servicio = input('\nIngrese el servicio que se desea solicitar: ')
            if not servicio:
                print('\n** EL SERVICIO NO SE PUEDE OMITIR, INGRESE UN SERVICIO **')
                continue
            while True:
                try:
                    monto = input('\nIngrese el monto a pagar: ')
                    monto = float(monto)
                    if validar_monto(monto):
                        break
                    else:
                        print('\n**  EL MONTO INGRESADO DEBE SER MAYOR A 0 **')
                except ValueError:
                    print('\n** EL MONTO INGRESADO NO ES UN NÚMERO VÁLIDO, INGRESELO NUEVAMENTE  **')
            total+=monto
            detalle_nota.append([servicio, monto])
            servicio_n = input('\n¿Desea agregar otro servicio? (S)i (N)o: ')
            if servicio_n.lower() != 's':
                break

        while True:
            correo = input('\nIngrese su correo electrónico: ')
            if validar_correo(correo):
                break
            else:
                print('\n**  EL CORREO PROPORCIONADO NO TIENE UN FORMATO VÁLIDO, INGRESELO NUEVAMENTE **')
        while True:
            rfc = input('\nIngresa tu RFC : ')
            rfc = rfc.strip().upper()
            if validar_rfc(rfc):
                break
            else:
                print('*  EL RFC INGRESADO NO CUMPLE CON EL FORMATO, INGRESELO NUEVAMENTE  *')
        nueva_nota = (fecha, cliente, correo, rfc, detalle_nota)
        notas[len(notas) + 1] = nueva_nota
        p = PrettyTable()
        p.field_names = ["Folio", "Fecha", "Nombre", "Correo", "RFC", "Servicio", "Monto"]

        for folio, (fecha, cliente, correo, rfc, detalle_nota) in notas.items():
            servicios = ', '.join([servicio for servicio, _ in detalle_nota])
            total = sum(monto for _, monto in detalle_nota)
            p.add_row([folio, fecha_formateada, cliente, correo, rfc, servicios, total])

        print(p)
        agregar_nota = input('\n¿Desea registrar otra nota? (S)i (N)o: ')
        if agregar_nota.lower() != 's':
            print('\n** NOTA(S) REGISTRADA CORRECTAMENTE **')
            break

def consulta_periodo():
    print('\n   CONSULTA DE NOTAS POR PERÍODO ')
    while True:
        try:
            fecha_inicial_str = input('\nIngrese la fecha inicial (DD/MM/YYYY) o presione Enter para usar fecha dada por el sistema (01/01/2000): ')
            if fecha_inicial_str == '':
                fecha_inicial = datetime.date(2000, 1, 1)
            else:
                fecha_inicial = datetime.datetime.strptime(fecha_inicial_str, "%d/%m/%Y").date()
            fecha_final_str = input('\nIngrese la fecha final (DD/MM/YYYY) o presione Enter para usar la fecha actual: ')
            if fecha_final_str == '':
                fecha_final = datetime.date.today()
            else:
                fecha_final = datetime.datetime.strptime(fecha_final_str, "%d/%m/%Y").date()
            if fecha_final < fecha_inicial:
                print('\n** LA FECHA FINAL DEBE SER MAYOR O IGUAL QUE LA FECHA ACTUAL. **')
            else:
                break
        except ValueError:
            print('\n** FORMATO DE FECHA INCORRECTO, UTILICE EL FORMATO (DD/MM/YYYY). **')


    notas_periodo = []
    total_periodo = 0
    num_notas_periodo = 0



    for folio, (fecha, cliente, correo, rfc, detalle_nota) in notas.items():
        if fecha_inicial <= fecha <= fecha_final:
            total = sum(monto for _, monto in detalle_nota)
            fecha_formateada = fecha.strftime("%d/%m/%Y")
            notas_periodo.append((folio, fecha, cliente, correo, rfc, total))
    if not notas_periodo:
        print(f'\n** No hay notas registradas en el período de {fecha_inicial} a {fecha_final}. **')
    else:
        print('\n** NOTAS REGISTRADAS EN EL PERIODO INGRESADO: **')
        print('---------------------------------------------------')
        pr = PrettyTable()
        pr.field_names = ["Folio", "Fecha", "Nombre", "Correo", "RFC", "Total"]

        for folio, fecha, cliente, correo, rfc, total in notas_periodo:
            pr.add_row([folio, fecha_formateada, cliente, correo, rfc, total])

        print(pr)


def consulta_folio():
    print('\n   CONSULTA NOTA POR FOLIO ')
    folio_consulta = validacion_num('\nIngrese el folio de la nota que desea buscar: ')
    if folio_consulta in notas:
        fecha, nombre, correo, rfc, detalle_nota = notas[folio_consulta]
        total = sum(monto for _, monto in detalle_nota)
        pre = PrettyTable()
        pre.field_names = ["Folio", "Fecha", "Nombre", "Correo", "RFC", "Servicio", "Monto"]
        servicios = ', '.join([servicio for servicio, _ in detalle_nota])
        fecha_formateada = fecha.strftime("%d/%m/%Y")
        pre.add_row([folio_consulta, fecha_formateada, nombre, correo, rfc, servicios, total])

        print(pre)

    else:
        print('\n** La nota no existe **')

def consulta_cliente():
    print('\n   CONSULTA NOTAS POR CLIENTE ')
    notas_por_cliente = {}
    rfcs = list(set([nota[3] for nota in notas.values()]))
    rfcs.sort()

    for idx, rfc in enumerate(rfcs, start=1):
        notas_por_cliente[idx] = rfc
        print(f'{idx}. RFC: {rfc}')

    while True:
        try:
            seleccion = int(input('\nSeleccione el número de RFC a consultar (0 para regresar): '))
            if seleccion == 0:
                return
            elif 1 <= seleccion <= len(rfcs):
                break
            else:
                print('\n** Selección no válida. Ingrese un número válido **')
        except ValueError:
            print('\n** Opción no válida. Ingrese un número válido **')

    rfc_seleccionado = notas_por_cliente[seleccion]
    notas_cliente = [(folio, fecha, cliente, rfc, detalle) for folio, (fecha, cliente, _, rfc, detalle) in notas.items() if rfc == rfc_seleccionado]

    if not notas_cliente:
        print(f'\n** No hay notas registradas para el cliente con RFC {rfc_seleccionado}. **')
    else:
        print(f'\n** NOTAS REGISTRADAS PARA EL CLIENTE CON RFC {rfc_seleccionado}: **')
        print('--------------------------------------------------------')

        total = 0
        pretty = PrettyTable()
        pretty.field_names = ["Folio", "Fecha", "Cliente", "RFC", "Servicio", "Total"]
        for folio, fecha, cliente, rfc, detalle in notas_cliente:
            total = sum(costo for _, costo in detalle)
            servicios = ', '.join([servicio for servicio, _ in detalle])
            fecha_formateada = fecha.strftime("%d/%m/%Y")
            pretty.add_row([folio, fecha, cliente, rfc, servicios, f"${total:.2f}"])
        print(pretty)

        montos_totales = [total for _, _, _, _, detalle in notas_cliente]
        monto_promedio = sum(montos_totales) / len(montos_totales) if len(montos_totales) > 0 else 0
        print(f'\nMonto promedio de las notas del cliente: ${monto_promedio:.2f}')

        exportar_excel = input('\n¿Desea exportar esta información a un archivo Excel? (S)i (N)o: ')
        if exportar_excel.lower() == 's':
            nombre_archivo = f'{rfc_seleccionado}_{datetime.datetime.now().strftime("%Y%m%d%H%M%S")}.xlsx'
            workbook = xlsxwriter.Workbook(nombre_archivo)
            worksheet = workbook.add_worksheet()
            headers = ['Folio', 'Fecha', 'Cliente', 'RFC', 'Total', 'Servicio', 'Costo']

            for col, header in enumerate(headers):
                worksheet.write(0, col, header)

            row = 1
            for folio, fecha, cliente, rfc, detalle in notas_cliente:
                total = 0
                for servicio in detalle:
                    nombre_servicio, costo_servicio = servicio
                    worksheet.write(row, 0, folio)
                    worksheet.write(row, 1, fecha)
                    worksheet.write(row, 2, cliente)
                    worksheet.write(row, 3, rfc)
                    worksheet.write(row, 4, total)
                    worksheet.write(row, 5, nombre_servicio)
                    worksheet.write(row, 6, costo_servicio)
                    row += 1

            workbook.close()
            print(f'\n** Información exportada a {nombre_archivo} correctamente. **')


def cancelar_nota():
    print('\n   CANCELAR UNA NOTA')
    while True:
        folio_cancelar = input('\nIngrese el folio de la nota a cancelar o escriba "salir" si quiere regresar al menú principal: ')
        if folio_cancelar.lower() == 'salir':
            print("\nRegresando al menú principal...")
            return
        else:
            try:
                folio_cancelar = int(folio_cancelar)
            except ValueError:
                print('Entrada no válida. Ingrese un número de folio válido.')
                continue
        if folio_cancelar in notas and folio_cancelar not in notas_canceladas:
            fecha, nombre, correo, rfc, detalle_nota = notas[folio_cancelar]
            total = sum(costo for _, costo in detalle_nota)
            print(f'\n** NOTA A PUNTO DE CANCELAR: **')
            prett = PrettyTable()
            prett.field_names = ["Folio", "Fecha", "Nombre", "Correo", "RFC", "Servicio", "Monto"]

            for folio, (fecha, cliente, correo, rfc, detalle_nota) in notas.items():
                if folio == folio_cancelar:
                    servicios = ', '.join([servicio for servicio, _ in detalle_nota])
                    total = sum(monto for _, monto in detalle_nota)
                    fecha_formateada = fecha.strftime("%d/%m/%Y")
                    prett.add_row([folio, fecha_formateada, cliente, correo, rfc, servicios, total])
            print(prett)

            while True:
                confirmacion = input('\n¿Desea cancelar esta nota? (S)i (N)o: ')
                if confirmacion.lower() == 's':
                  notas_canceladas[folio_cancelar] = notas[folio_cancelar]
                  del notas[folio_cancelar]
                  print('\n** NOTA CANCELADA CORRECTAMENTE **')
                  break
                else:
                  print('\n** Operación cancelada **')
        else:
            print('* La nota no existe o ya está cancelada *')

def recuperar_nota():
    print('\n   RECUPERAR UNA NOTA CANCELADA ')
    if not notas_canceladas:
        print('*  No hay notas canceladas para recuperar *')
        return

    print('\n** NOTAS PREVIAMENTE CANCELADAS: **')
    print('---------------------------------------')
    for folio in notas_canceladas:
        prettytable1 = PrettyTable()
        prettytable1.field_names = ["Folio"]
        prettytable1.add_row([folio])

    print(prettytable1)

    while True:
        folio_recuperar = input('\nIngrese el folio de la nota a recuperar (o 0 para cancelar): ')
        try:
            folio_recuperar = int(folio_recuperar)
            if folio_recuperar in notas_canceladas:
                notas[folio_recuperar] = notas_canceladas[folio_recuperar]
                del notas_canceladas[folio_recuperar]
                print(f'\n** Nota {folio_recuperar} recuperada **')
                break
            elif folio_recuperar == 0:
                print('* Operación cancelada, volviendo al menú principal *')
                break
            else:
                print('* El folio ingresado no corresponde a una nota cancelada *')
        except ValueError:
            print('* Opción no válida, ingrese un número válido *')

def validacion_txt(mensaje):
  while True:
        entrada = input(mensaje)
        if entrada.strip() == "":
            print('\n** NO SE PUEDE OMITIR EL CAMPO, INGRESE UN REGISTRO O ESCRIBA SALIR PARA VOLVER AL MENU_PRINCIPAL **')
        else:
            return entrada


def validacion_num(mensaje):
    while True:
        entrada = input(mensaje)
        if entrada.strip() == "":
            print('\n** NO SE PUEDE OMITIR LA OPERACIÓN, INGRESE ALGUNA OPCIÓN **')
            continue
        try:
            numero = int(entrada)
            return numero
        except ValueError:
            print('\n** OPCIÓN NO VÁLIDA, INGRESE UN NÚMERO DE ALGÚNA OPCIÓN MOSTRADA **')

def menu_principal():
    cargar_datos_csv()
    while True:
        print('\n---------------------------------------------')
        print('       MENÚ PRINCIPAL TALLER MECÁNICO         ')
        print('---------------------------------------------')
        print('1. Registrar una nota')
        print('2. Consultas y reportes')
        print('3. Cancelar una nota')
        print('4. Recuperar una nota')
        print('5. Salir')
        opcion = validacion_num('\nIngrese el número de la operación que desea realizar: ')
        if 1 <= opcion <= 5:
            if opcion == 1:
                registrar_notas()
            elif opcion == 2:
                submenu_consultas()
            elif opcion == 3:
                cancelar_nota()
            elif opcion == 4:
                recuperar_nota()
            elif opcion == 5:
                confirmacion_salir = input('\n¿Está seguro de que desea salir del programa? (S)i (N)o: ')
                if confirmacion_salir.lower() == 's':
                    guardar_datos_csv()
                    print('\n** HAS SALIDO DEL SISTEMA **')
                    break
                else:
                    print('\n** SALIDA CANCELADA, VOLVIENDO AL MENÚ PRINCIPAL **')
        else:
            print('\n** OPCIÓN NO VALIDA, INGRESE UN NÚMERO DE ALGÚNA OPCIÓN MOSTRADA. **')

def submenu_consultas():
    while True:
        print("\n---------------------------------------------")
        print("        SUBMENÚ CONSULTAS Y REPORTES")
        print("---------------------------------------------")
        print("1. Consulta por período")
        print("2. Consulta por folio")
        print("3. Consulta por cliente")
        print("4. Regresar al menú principal")

        subopcion = validacion_num("\nIngrese el número de la operación que desea realizar: ")

        if 1 <= subopcion <= 4:
            if subopcion == 1:
                consulta_periodo()
            elif subopcion == 2:
                consulta_folio()
            elif subopcion == 3:
                consulta_cliente()
            elif subopcion == 4:
                return
        else:
            print('\n*Opción no válida. Ingrese el número de alguna opción mostrada*')

menu_principal()
