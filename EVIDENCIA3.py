# -*- coding: utf-8 -*-
"""EVIDENCIA3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17D0yMycpHMfk36qXQg_Omo-oK4uRwwiu

# Sección nueva Puntos faltantes

1. Listado de clientes (importar a CVS y Excel)
2. Listado de servicios (importar a CVS y Excel)
"""

import sys
import sqlite3
from sqlite3 import Error


try:
    with sqlite3.connect('/content/tallermecanico.db') as conn:
        mi_cursor = conn.cursor()
        mi_cursor.execute('CREATE TABLE IF NOT EXISTS clientes (IdCliente INTEGER PRIMARY KEY, nombre TEXT NOT NULL, correo TEXT NOT NULL, rfc TEXT NOT NULL);')
        mi_cursor.execute('CREATE TABLE IF NOT EXISTS notas (IdNota INTEGER PRIMARY KEY, fecha DATE NOT NULL, IdCliente INTEGER, IdServicio INTEGER, FOREIGN KEY (IdCliente) REFERENCES clientes (IdCliente), FOREIGN KEY (IdServicio) REFERENCES servicios(IdServicios));')
        mi_cursor.execute('CREATE TABLE IF NOT EXISTS servicios (IdServicio INTEGER PRIMARY KEY, nombre TEXT NOT NULL, costo FLOAT NOT NULL);')
        mi_cursor.execute('CREATE TABLE IF NOT EXISTS notas_canceladas (IdNota INTEGER PRIMARY KEY, fecha DATE NOT NULL, IdCliente INTEGER, IdServicio INTEGER, FOREIGN KEY (IdCliente) REFERENCES clientes (IdCliente), FOREIGN KEY (IdServicio) REFERENCES servicios(IdServicios));')
        print('TABLAS CREADAS EXITOSAMENTE')
except Error as e:
    print(e)
except Exception:
    print(f'Se produjo el siguiente error: {sys.exc_info()[0]}')

mi_cursor.execute('PRAGMA foreign_keys = ON;')

import openpyxl
import csv
from openpyxl import Workbook
from datetime import datetime
import re
from prettytable import PrettyTable
import sys
import sqlite3
from sqlite3 import Error
import datetime
ultimo_folio=0
!pip install xlsxwriter
notas = {}
notas_canceladas = {}

def validar_correo(correo):
    patron = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    return bool(re.match(patron, correo))

def validar_rfc(rfc):
    patron = r'^[A-Z]{4}[0-9]{6}[A-Z0-9]{3}$'
    return bool(re.match(patron, rfc))



def registrar_notas():
    while True:
        print('\n   REGISTRA UNA NUEVA NOTA')
        print('\nNota: Escribe "salir" si deseas volver al menú principal')
        with sqlite3.connect('/content/tallermecanico.db') as conn:
            mi_cursor = conn.cursor()
            mi_cursor.execute('SELECT IdCliente, nombre FROM clientes')
            datos = mi_cursor.fetchall()
            for dato in datos:
                print(dato)
        while True:
            try:
                while True:
                    cliente = input('\nIngresa la clave del cliente: ')
                    if cliente.lower() == 'salir':
                        print('\n** OPERACIÓN CANCELADA, VOLVIENDO AL MENÚ PRINCIPAL **')
                        return
                    elif cliente:
                        break
                with sqlite3.connect('/content/tallermecanico.db') as conn:
                    mi_cursor = conn.cursor()
                    mi_cursor.execute('SELECT IdCliente FROM clientes WHERE IdCliente = ?', (cliente,))
                    resultado = mi_cursor.fetchall()
                if resultado:
                    break
                else:
                    print('\n** Error: Clave de cliente no válida. Ingresa una clave de cliente válida o escribe "salir" para volver al menú principal. **')
            except ValueError:
                print('\n** Error: Clave de cliente no válida. Ingresa una clave de cliente válida o escribe "salir" para volver al menú principal. **')
        while True:
            try:
                fecha_str = input('\nIngresa la fecha en formato DD/MM/YYYY: ')
                fecha_actual = datetime.now().date()
                fecha_ingresada = datetime.strptime(fecha_str, "%d/%m/%Y").date()
                if fecha_ingresada > fecha_actual:
                    print('\n** LA FECHA INGRESADA NO DEBE SER POSTERIOR A LA FECHA ACTUAL, INGRESA UNA FECHA VÁLIDA **')
                else:
                    break
            except ValueError:
                print('* EL FORMATO DE FECHA NO ES VÁLIDO, INGRESA LA FECHA EN FORMATO DD/MM/YYYY *')

        fecha_formateada = fecha_ingresada.strftime("%d/%m/%Y")
        with sqlite3.connect('/content/tallermecanico.db') as conn:
            mi_cursor = conn.cursor()
            mi_cursor.execute('SELECT IdServicio, nombre, costo FROM servicios')
            datos1 = mi_cursor.fetchall()
            print("Servicios disponibles:")
            for dato in datos1:
                print(dato)
            while True:
                try:
                    servicio = input('\nIngresa la clave del servicio: ')
                    if servicio.lower() == 'salir':
                        print('\n** OPERACIÓN CANCELADA, VOLVIENDO AL MENÚ PRINCIPAL **')
                        return
                    elif servicio:
                        with sqlite3.connect('/content/tallermecanico.db') as conn:
                            mi_cursor = conn.cursor()
                            mi_cursor.execute('SELECT IdServicio FROM servicios WHERE IdServicio = ?', (servicio,))
                            resultado = mi_cursor.fetchall()
                        if resultado:
                            break
                        else:
                            print('\n** Error: Clave de servicio no válida. Ingresa una clave de servicio válida o escribe "salir" para volver al menú principal. **')
                except ValueError:
                    print('\n** Error: Clave de servicio no válida. Ingresa una clave de servicio válida o escribe "salir" para volver al menú principal. **')

            servicio_n = input('\n¿Deseas agregar otro servicio? (S)i (N)o: ')

        try:
            with sqlite3.connect('/content/tallermecanico.db') as conn:
                mi_cursor = conn.cursor()

                valores = (fecha_ingresada, cliente, servicio)
                mi_cursor.execute('INSERT INTO notas (fecha, IdCliente, IdServicio) VALUES (?,?,?)', valores)
                print(f'Se asignó la clave {mi_cursor.lastrowid}')
        except Error as e:
            print(e)
        except Exception:
            print(f'Se produjo el siguiente error: {sys.exc_info()[0]}')
        finally:
            conn.close()
        agregar_nota = input('\n¿Deseas registrar otra nota? (S)i (N)o: ')
        if agregar_nota.lower() != 's':
            print('\n** NOTA(S) REGISTRADA(S) CORRECTAMENTE **')
            break


######
def cancelar_nota():
    print('\n   CANCELAR UNA NOTA')
    while True:
        folio_cancelar = input('\nIngrese el folio de la nota a cancelar o escriba "salir" si quiere regresar al menú principal: ')
        if folio_cancelar.lower() == 'salir':
            print("\nRegresando al menú principal...")
            return
        else:
            try:
                folio_cancelar = int(folio_cancelar)
            except ValueError:
                print('Entrada no válida. Ingrese un número de folio válido.')
                continue
        if folio_cancelar in notas and folio_cancelar not in notas_canceladas:
            fecha, nombre, correo, rfc, detalle_nota = notas[folio_cancelar]
            total = sum(costo for _, costo in detalle_nota)
            print(f'\n** NOTA A PUNTO DE CANCELAR: **')
            prett = PrettyTable()
            prett.field_names = ["Folio", "Fecha", "Nombre", "Correo", "RFC", "Servicio", "Monto"]

            for folio, (fecha, cliente, correo, rfc, detalle_nota) in notas.items():
                if folio == folio_cancelar:
                    servicios = ', '.join([servicio for servicio, _ in detalle_nota])
                    total = sum(monto for _, monto in detalle_nota)
                    fecha_formateada = fecha.strftime("%d/%m/%Y")
                    prett.add_row([folio, fecha_formateada, cliente, correo, rfc, servicios, total])
            print(prett)
            while True:
                confirmacion = input('\n¿Desea cancelar esta nota? (S)i (N)o: ')
                if confirmacion.lower() == 's':
                  notas_canceladas[folio_cancelar] = notas[folio_cancelar]
                  del notas[folio_cancelar]
                  print('\n** NOTA CANCELADA CORRECTAMENTE **')
                  break
                else:
                  print('\n** Operación cancelada **')
        else:
            print('* La nota no existe o ya está cancelada *')

def recuperar_nota():
    print('\n   RECUPERAR UNA NOTA CANCELADA ')
    if not notas_canceladas:
        print('*  No hay notas canceladas para recuperar *')
        return
    print('\n** NOTAS PREVIAMENTE CANCELADAS: **')
    print('---------------------------------------')
    for folio in notas_canceladas:
        prettytable1 = PrettyTable()
        prettytable1.field_names = ["Folio"]
        prettytable1.add_row([folio])
    print(prettytable1)
    while True:
        folio_recuperar = input('\nIngrese el folio de la nota a recuperar (o 0 para cancelar): ')
        try:
            folio_recuperar = int(folio_recuperar)
            if folio_recuperar in notas_canceladas:
                notas[folio_recuperar] = notas_canceladas[folio_recuperar]
                del notas_canceladas[folio_recuperar]
                print(f'\n** Nota {folio_recuperar} recuperada **')
                break
            elif folio_recuperar == 0:
                print('* Operación cancelada, volviendo al menú principal *')
                break
            else:
                print('* El folio ingresado no corresponde a una nota cancelada *')
        except ValueError:
            print('* Opción no válida, ingrese un número válido *')

###################

def consulta_periodo():
    print('\n   CONSULTA DE NOTAS POR PERÍODO')
    while True:
        try:
            fecha_inicial_str = input('\nIngrese la fecha inicial (DD/MM/YYYY) o presione Enter para usar fecha dada por el sistema (01/01/2000): ')
            if fecha_inicial_str == '':
                fecha_inicial = datetime.date(2000, 1, 1)
            else:
                fecha_inicial = datetime.datetime.strptime(fecha_inicial_str, "%d/%m/%Y").date()
            fecha_final_str = input('\nIngrese la fecha final (DD/MM/YYYY) o presione Enter para usar la fecha actual: ')
            if fecha_final_str == '':
                fecha_final = datetime.date.today()
            else:
                fecha_final = datetime.datetime.strptime(fecha_final_str, "%d/%m/%Y").date()
            if fecha_final < fecha_inicial:
                print('\n** LA FECHA FINAL DEBE SER MAYOR O IGUAL QUE LA FECHA INICIAL. **')
            else:
                break
        except ValueError:
            print('\n** FORMATO DE FECHA INCORRECTO, UTILICE EL FORMATO (DD/MM/YYYY). **')

    try:
        with sqlite3.connect('/content/tallermecanico.db') as conn:
            mi_cursor = conn.cursor()
            criterios = (fecha_inicial, fecha_final)
            mi_cursor.execute('''
                SELECT n.IdNota, n.fecha, n.IdCliente, c.nombre AS NombreCliente,
                       GROUP_CONCAT(s.IdServicio) AS IdServicios,
                       GROUP_CONCAT(s.nombre) AS NombresServicio,
                       SUM(s.costo) AS CostoTotal
                FROM notas n
                JOIN clientes c ON n.IdCliente = c.IdCliente
                JOIN servicios s ON n.IdServicio = s.IdServicio
                WHERE fecha BETWEEN ? AND ?
                GROUP BY n.IdNota
            ''', criterios)
            notas_periodo = mi_cursor.fetchall()
    except sqlite3.Error as e:
        print(e)
    except Exception as e:
        print(f'Se produjo el siguiente error: {e}')

    if not notas_periodo:
        print(f'\n** No hay notas registradas en el período de {fecha_inicial} a {fecha_final}. **')
    else:
        print('\n** NOTAS REGISTRADAS EN EL PERIODO INGRESADO: **')
        print('---------------------------------------------------')
        pt = PrettyTable()
        pt.field_names = ["ID Nota", "Fecha", "ID Cliente", "Nombre Cliente", "ID Servicios", "Nombres Servicio", "Costo Total"]
        for nota in notas_periodo:
            pt.add_row(nota)
        print(pt)






#######################


def consulta_folio():
    print('\n   CONSULTA NOTA POR FOLIO')

    folio_consulta = input('Ingresa el folio de la nota que deseas buscar: ')

    if folio_consulta == '0':
        return

    nota = None  # Inicializamos la variable nota

    try:
        with sqlite3.connect('/content/tallermecanico.db') as conn:
            mi_cursor = conn.cursor()
            mi_cursor.execute('''
                SELECT n.IdNota, n.fecha, c.nombre, c.correo, c.rfc, s.nombre, s.costo
                FROM notas n
                JOIN clientes c ON n.IdCliente = c.IdCliente
                JOIN servicios s ON n.IdServicio = s.IdServicio
                WHERE n.IdNota = ?
                ''', (folio_consulta,))
            nota = mi_cursor.fetchone()

        if nota:
            pretty = PrettyTable()
            pretty.field_names = ["Folio", "Fecha", "Nombre", "Correo", "RFC", "Servicio", "Costo"]
            pretty.add_row([folio_consulta] + list(nota[1:]))  # Excluye la columna de IdNota
            print(pretty)
        else:
            print('\n** El folio de la nota no existe o la nota está cancelada. **')

    except sqlite3.Error as e:
        print(f'Se produjo el siguiente error: {e}')




        ################################



def consultas_reportes_notas():
    while True:
        print("\n---------------------------------------------")
        print("        SUBMENÚ CONSULTAS Y REPORTES")
        print("---------------------------------------------")
        print("1. Consulta por período")
        print("2. Consulta por folio")
        print("3. Regresar al menú de notas")
        subopcion = int(input("\nIngrese el número de la operación que desea realizar: "))
        if 1 <= subopcion <= 4:
            if subopcion == 1:
                consulta_periodo()
            elif subopcion == 2:
                consulta_folio()
            elif subopcion == 3:
              menu_notas()
        else:
            print('\n*Opción no válida. Ingrese el número de alguna opción mostrada*')

def menu_notas():
    while True:
        print('\n---------------------------------------------')
        print('       MENÚ NOTAS         ')
        print('---------------------------------------------')
        print('1. Registrar una nota')
        print('2. Consultas y reportes')
        print('3. Cancelar una nota')
        print('4. Recuperar una nota')
        print('5. Regresar al menú principal')
        opcion = int(input('\nIngrese el número de la operación que desea realizar: '))
        if 1 <= opcion <= 5:
            if opcion == 1:
                registrar_notas()
            elif opcion == 2:
                consultas_reportes_notas()
            elif opcion == 3:
                cancelar_nota()
            elif opcion == 4:
                recuperar_nota()
            elif opcion == 5:
                confirmacion_salir = input('\n¿Está seguro de que desea regresar al menú principal? (S)i (N)o: ')
                if confirmacion_salir.lower() == 's':
                    return
                else:
                    print('\n** SALIDA CANCELADA, VOLVIENDO AL MENÚ PRINCIPAL **')
        else:
            print('\n** OPCIÓN NO VALIDA, INGRESE UN NÚMERO DE ALGÚNA OPCIÓN MOSTRADA. **')

def agregar_clientes():
    while True:
        print('\n   REGISTRA UN NUEVO CLIENTE')
        print('\nNota: Escriba (salir) si desea volver al menú clientes')
        while True:
            cliente = input('\nIngrese el nombre completo del cliente: ')
            if cliente.strip() == '':
                print('\n** ERROR, EL CLIENTE NO PUEDE OMITIRSE **')
                continue
            else:
                break
        while True:
            correo = input('\nIngrese su correo electrónico: ')
            if correo.strip() == '':
                print('\n** ERROR, EL CORREO NO PUEDE OMITIRSE **')
                continue
            if validar_correo(correo):
                break
            else:
                print('\n** EL CORREO PROPORCIONADO NO TIENE UN FORMATO VÁLIDO, INGRESELO NUEVAMENTE **')
                continue
        while True:
            rfc = input('\nIngresa el RFC del cliente : ')
            if rfc.strip() == '':
                print('\n** ERROR, EL RFC NO PUEDE OMITIRSE **')
                continue
            if validar_rfc(rfc):
                break
            else:
                print('\n** EL RFC INGRESADO NO CUMPLE CON EL FORMATO, INGRESELO NUEVAMENTE **')
                continue
        try:
            with sqlite3.connect('/content/tallermecanico.db') as conn:
                mi_cursor = conn.cursor()
                datos = (cliente, correo, rfc)
                mi_cursor.execute('INSERT INTO clientes (nombre,correo,rfc) VALUES (?,?,?)', datos)
                print(f'\nLa clave asignada fue {mi_cursor.lastrowid}')
        except Error as e:
            print(e)
        except Exception as e:
            print(f'Se produjo el siguiente error: {e}')
        finally:
            conn.close()
        while True:
            opcion = input('\nDesea agregar otro cliente (S)i (N)o: ')
            if opcion.lower() == 'n':
                return
            elif opcion.lower() == 's':
                break
            else:
                print('\n** INGRESA UNA OPCIÓN VÁLIDA **')
                continue

def listado_clientes_registrados():
    while True:
        print('---------------------------------------')
        print('SUBMENÚ LISTADO DE CLIENTES REGISTRADOS')
        print('---------------------------------------')
        print('1. Ordenado por clave')
        print('2. Ordenado por nombre')
        print('3. Volver al menú anterior')
        opcion = int(input('\nIngresa el número de la operación que deseas realizar: '))
        encabezados = ['Clave', 'Nombre', 'Correo', 'RFC']
        if opcion == 1:
            try:
                with sqlite3.connect('/content/tallermecanico.db') as conn:
                    mi_cursor = conn.cursor()
                    mi_cursor.execute('SELECT * FROM clientes ORDER BY IdCliente')
                    datos = mi_cursor.fetchall()
                    print(f'CLIENTES ACTIVOS')
                    for IdCliente, nombre, correo, rfc in datos:
                        print(f'\nClave: {IdCliente}')
                        print(f'Nombre: {nombre}')
                        print(f'Correo: {correo}')
                        print(f'RFC: {rfc}')
                    print('\n---------------------------------------')
                    print('           EXPORTAR REPORTE')
                    print('---------------------------------------')
                    print('1.Exportar reporte como archivo EXCEL')
                    print('2.Exportar reporte como archivo CSV')
                    print('3.Volver al menú de reportes')
                    exportar = int(input('\nIngresa el número de la operación que deseas realizar: '))
                    if exportar == 1:
                        fecha_reporte = datetime.now().strftime('%m_%d_%Y')
                        nombre_excel = f'ReporteClientesActivosPorClave_{fecha_reporte}.xlsx'
                        wb = Workbook()
                        hoja = wb.active
                        hoja.append(encabezados)
                        for dato in datos:
                            hoja.append(dato)
                        wb.save(nombre_excel)
                        print(f'\nInforme {nombre_excel} exportado correctamente')
                    elif exportar == 2:
                        fecha_reporte = datetime.now().strftime('%m_%d_%Y')
                        nombre_csv = f'ReporteClientesActivosPorClave_{fecha_reporte}.csv'
                        with open(nombre_csv, 'w', newline='') as reporte_csv:
                            grabador = csv.writer(reporte_csv)
                            grabador.writerow(encabezados)
                            grabador.writerows(datos)
                        print(f'\nInforme {nombre_csv} exportado correctamente')
                    elif exportar == 3:
                        break
            except Exception as e:
                print(f"Error: {e}")
        elif opcion == 2:
            try:
                with sqlite3.connect('/content/tallermecanico.db') as conn:
                    mi_cursor = conn.cursor()
                    mi_cursor.execute('SELECT * FROM clientes ORDER BY nombre')
                    datos = mi_cursor.fetchall()
                    print(f'CLIENTES ACTIVOS')
                    for IdCliente, nombre, correo, rfc in datos:
                        print(f'\nClave: {IdCliente}')
                        print(f'Nombre: {nombre}')
                        print(f'Correo: {correo}')
                        print(f'RFC: {rfc}')
                    print('\n---------------------------------------')
                    print('           EXPORTAR REPORTE')
                    print('---------------------------------------')
                    print('1.Exportar reporte como archivo EXCEL')
                    print('2.Exportar reporte como archivo CSV')
                    print('3.Volver al menú de reportes')
                    exportar = int(input('\nIngresa el número de la operación que deseas realizar: '))
                    if exportar == 1:
                        fecha_reporte = datetime.now().strftime('%m_%d_%Y')
                        nombre_excel = f'ReporteClientesActivosPorNombre_{fecha_reporte}.xlsx'
                        wb = Workbook()
                        hoja = wb.active
                        hoja.append(encabezados)
                        for dato in datos:
                            hoja.append(dato)
                        wb.save(nombre_excel)
                        print(f'\nInforme {nombre_excel} exportado correctamente')
                    elif exportar == 2:
                        fecha_reporte = datetime.now().strftime('%m_%d_%Y')
                        nombre_csv = f'ReporteClientesActivosPorNombre_{fecha_reporte}.csv'
                        with open(nombre_csv, 'w', newline='') as reporte_csv:
                            grabador = csv.writer(reporte_csv)
                            grabador.writerow(encabezados)
                            grabador.writerows(datos)
                        print(f'\nInforme {nombre_csv} exportado correctamente')
                    elif exportar == 3:
                        break
            except Exception as e:
                print(f"Error: {e}")
        elif opcion == 3:
            break

def consultas_reportes_clientes():
    while True:
        print('\n  CONSULTAS Y REPORTES DE CLIENTES')
        print('1. Listado de clientes registrados')
        print('2. Búsqueda por clave')
        print('3. Búsqueda por nombre')
        print('4. Volver al menú clientes')
        consulta = int(input('\nIngresa el número de la operación que deseas realizar: '))

        if consulta == 1:
                listado_clientes_registrados()
        elif consulta == 2:
                try:
                    with sqlite3.connect('/content/tallermecanico.db') as conn:
                        mi_cursor = conn.cursor()
                        mi_cursor.execute('SELECT IdCliente, nombre FROM clientes')
                        clientes = mi_cursor.fetchall()

                        if not clientes:
                            print("No hay clientes registrados.")
                        else:
                            pretty = PrettyTable()
                            pretty.field_names = ["IdCliente", "Nombre"]
                            for IdCliente, nombre in clientes:
                                pretty.add_row([IdCliente, nombre])
                            print(pretty)

                            IdCliente_consultar = int(input('\nIngresa la clave del cliente que deseas consultar: '))
                            cliente_encontrado = False
                            for IdCliente, nombre in clientes:
                                if IdCliente_consultar == IdCliente:
                                    cliente_encontrado = True
                                    break

                            if cliente_encontrado:
                                # Realizar la consulta detallada del cliente

                                mi_cursor.execute('SELECT * FROM clientes WHERE IdCliente = ?', (IdCliente_consultar,))
                                cliente_detalle = mi_cursor.fetchone()
                                if cliente_detalle:
                                    pretty_cliente = PrettyTable()
                                    pretty_cliente.field_names = ["IdCliente", "Nombre", "Correo", "RFC"]
                                    pretty_cliente.add_row(cliente_detalle)
                                    print(pretty_cliente)

                                    # Realizar la consulta de notas relacionadas con el cliente
                                    mi_cursor.execute('''
                                        SELECT n.IdNota, n.fecha, s.nombre, ns.costo
                                        FROM notas n
                                        JOIN notas_servicios ns ON n.IdNota = ns.IdNota
                                        JOIN servicios s ON ns.IdServicio = s.IdServicio
                                        WHERE n.IdCliente = ? AND n.cancelada = 0
                                    ''', (IdCliente_consultar,))
                                    notas = mi_cursor.fetchall()

                                    if notas:
                                        pretty_notas = PrettyTable()
                                        pretty_notas.field_names = ["IdNota", "Fecha", "Servicio", "Costo"]
                                        for IdNota, fecha, servicio, costo in notas:
                                            pretty_notas.add_row([IdNota, fecha, servicio, costo])
                                        print("\nNotas del cliente:")
                                        print(pretty_notas)
                                    else:
                                        print("El cliente no tiene notas registradas.")

                                else:
                                    print(f'\nNo se encontró un cliente con el IdCliente {IdCliente_consultar}.')

                            else:
                                print(f'\nNo se encontró un cliente con el IdCliente {IdCliente_consultar}.')

                except Error as e:
                    print(e)
                except Exception:
                    print(f'Se produjo el siguiente error: {sys.exc_info()[0]}')


        elif consulta == 3:
          nombre_consultar = input('\nIngrese el nombre completo del cliente a consultar: ')
          nombre_consultar = nombre_consultar.lower()  # Convertir el nombre a minúsculas
          try:
            with sqlite3.connect('/content/tallermecanico.db') as conn:
              mi_cursor = conn.cursor()
              datos1 = {'nombre': nombre_consultar}
              mi_cursor.execute('SELECT * FROM clientes WHERE LOWER(nombre) = :nombre', datos1)
              registro1 = mi_cursor.fetchall()
              if registro1:
                pretty = PrettyTable()
                pretty.field_names = ["Clave", "Nombre", "Correo", "RFC"]
                for clave, nombre, correo, rfc in registro1:
                    pretty.add_row([clave, nombre, correo, rfc])
                print(pretty)
              else:
                print(f'\nNo se encontró un registro asociado al nombre {nombre_consultar}')
          except Error as e:
            print(e)
          except Exception:
            print(f'Se produjo el siguiente error: {sys.exc_info()[0]}')



        elif consulta == 4:
           break
        else:
            print('** OPCIÓN NO VÁLIDA. INGRESE EL NÚMERO DE ALGUNA OPCIÓN MOSTRADA')


def menu_clientes():
    while True:
        print('\n  BIENVENIDO AL MENÚ DE CLIENTES')
        print('1. Agregar un cliente')
        print('2. Consultas y reportes')
        print('3. Volver al menú principal')
        operacion = int(input('\nIngrese el número de la operación que desea realizar: '))
        if operacion == 1:
            agregar_clientes()
        elif operacion == 2:
            consultas_reportes_clientes()
        elif operacion == 3:
            break

def validar_monto(monto_str):
    try:
        monto = float(monto_str)
        return monto >= 0.01
    except ValueError:
        return False


def menu_servicio():
    while True:
        print("""
        1. Agregar un servicio
        2. Consultas y Reportes
        3. Volver al menú principal
        """)

        opcion_servicio = input("Ingrese la opción que desea realizar: ")

        if opcion_servicio.isdigit():
            opcion_servicio = int(opcion_servicio)
            if opcion_servicio == 1:
                agregar_servicio()
            elif opcion_servicio == 2:
                menu_servicios_consultasyreportes()
            elif opcion_servicio == 3:
                return  # Salir del bucle y volver al menú principal
            else:
                print("Opción no válida. Por favor, elige una opción válida.")
        else:
            print("Opción no válida. Por favor, elige una opción válida.")

def menu_servicios_consultasyreportes():
  while True:
    print("MENÚ DE SERVICIOS, CONSULTAS Y REPORTES")
    print("1. Búsqueda por clave de servicio")
    print("2. Búsqueda por nombre de servicio")
    print("3. Listado de servicios")
    print("4. Regresar al menú de servicios")
    opcion = input("¿Cuál de las siguientes búsquedas quieres realizar?")

    try:
        opcion = int(opcion)
        if opcion == 1:
            buscar_servicio_por_clave()
        elif opcion == 2:
            buscar_servicio_por_nombre()
        elif opcion == 3:
            listado_servicios_registrados()
        elif opcion == 4:
            return
        else:
            print("ERROR, INGRESE UNA OPCIÓN VÁLIDA")
    except ValueError:
        print("ERROR, INGRESE UNA OPCIÓN VÁLIDA")



def listado_servicios_registrados():
    while True:
        print('---------------------------------------')
        print('SUBMENÚ LISTADO DE SERVICIOS REGISTRADOS')
        print('---------------------------------------')
        print('1. Ordenado por clave')
        print('2. Ordenado por nombre de servicio')
        print('3. Volver al menú anterior')
        opcion = int(input('\nIngresa el número de la operación que deseas realizar: '))
        encabezados = ['Clave', 'Nombre de Servicio', 'Descripción', 'Precio']
        if opcion == 1:
            try:
                with sqlite3.connect('/content/tallermecanico.db') as conn:
                    mi_cursor = conn.cursor()
                    mi_cursor.execute('SELECT * FROM servicios ORDER BY IdServicio')
                    datos = mi_cursor.fetchall()
                    print(f'SERVICIOS REGISTRADOS')
                    for IdServicio, nombre_servicio, descripcion, precio in datos:
                        print(f'\nClave: {IdServicio}')
                        print(f'Nombre de Servicio: {nombre_servicio}')
                        print(f'Descripción: {descripcion}')
                        print(f'Precio: {precio}')
                    print('\n---------------------------------------')
                    print('           EXPORTAR REPORTE')
                    print('---------------------------------------')
                    print('1. Exportar reporte como archivo EXCEL')
                    print('2. Exportar reporte como archivo CSV')
                    print('3. Volver al menú de reportes')
                    exportar = int(input('\nIngresa el número de la operación que deseas realizar: '))
                    if exportar == 1:
                        fecha_reporte = datetime.now().strftime('%m_%d_%Y')
                        nombre_excel = f'ReporteServiciosPorClave_{fecha_reporte}.xlsx'
                        wb = Workbook()
                        hoja = wb.active
                        hoja.append(encabezados)
                        for dato in datos:
                            hoja.append(dato)
                        wb.save(nombre_excel)
                        print(f'\nInforme {nombre_excel} exportado correctamente')
                    elif exportar == 2:
                        fecha_reporte = datetime.now().strftime('%m_%d_%Y')
                        nombre_csv = f'ReporteServiciosPorClave_{fecha_reporte}.csv'
                        with open(nombre_csv, 'w', newline='') as reporte_csv:
                            grabador = csv.writer(reporte_csv)
                            grabador.writerow(encabezados)
                            grabador.writerows(datos)
                        print(f'\nInforme {nombre_csv} exportado correctamente')
                    elif exportar == 3:
                        break
            except Exception as e:
                print(f"Error: {e}")
        elif opcion == 2:
            try:
                with sqlite3.connect('/content/tallermecanico.db') as conn:
                    mi_cursor = conn.cursor()
                    mi_cursor.execute('SELECT * FROM servicios ORDER BY nombre_servicio')
                    datos = mi_cursor.fetchall()
                    print(f'SERVICIOS REGISTRADOS')
                    for IdServicio, nombre_servicio, descripcion, precio in datos:
                        print(f'\nClave: {IdServicio}')
                        print(f'Nombre de Servicio: {nombre_servicio}')
                        print(f'Descripción: {descripcion}')
                        print(f'Precio: {precio}')
                    print('\n---------------------------------------')
                    print('           EXPORTAR REPORTE')
                    print('---------------------------------------')
                    print('1. Exportar reporte como archivo EXCEL')
                    print('2. Exportar reporte como archivo CSV')
                    print('3. Volver al menú de reportes')
                    exportar = int(input('\nIngresa el número de la operación que deseas realizar: '))
                    if exportar == 1:
                        fecha_reporte = datetime.now().strftime('%m_%d_%Y')
                        nombre_excel = f'ReporteServiciosPorNombre_{fecha_reporte}.xlsx'
                        wb = Workbook()
                        hoja = wb.active
                        hoja.append(encabezados)
                        for dato in datos:
                            hoja.append(dato)
                        wb.save(nombre_excel)
                        print(f'\nInforme {nombre_excel} exportado correctamente')
                    elif exportar == 2:
                        fecha_reporte = datetime.now().strftime('%m_%d_%Y')
                        nombre_csv = f'ReporteServiciosPorNombre_{fecha_reporte}.csv'
                        with open(nombre_csv, 'w', newline='') as reporte_csv:
                            grabador = csv.writer(reporte_csv)
                            grabador.writerow(encabezados)
                            grabador.writerows(datos)
                        print(f'\nInforme {nombre_csv} exportado correctamente')
                    elif exportar == 3:
                        break
            except Exception as e:
                print(f"Error: {e}")
        elif opcion == 3:
            break



def buscar_servicio_por_clave():
    try:
        with sqlite3.connect('notascolab.db') as conn:
            mi_cursor = conn.cursor()
            mi_cursor.execute('SELECT clave, nombreServicio FROM servicios')
            servicios = mi_cursor.fetchall()

            if not servicios:
                print("No hay servicios registrados en la base de datos.")
                return

            print("\nListado de Servicios:")
            for clave, nombreServicio in servicios:
                print(f"Clave: {clave}, Nombre: {nombreServicio}")

            while True:
                seleccion = input("Ingrese la clave del servicio que desea buscar: ")
                if seleccion.isdigit():
                    seleccion = int(seleccion)
                    if any(clave == seleccion for clave, _ in servicios):
                        mi_cursor.execute('SELECT * FROM servicios WHERE clave = ?', (seleccion,))
                        servicio = mi_cursor.fetchone()
                        clave, nombre, costo = servicio
                        print(f"\nDetalle del servicio con clave {clave}:")
                        print(f"Nombre: {nombreServicio}")
                        print(f"Costo: {costo}")
                        break
                    else:
                        print("ERROR, CLAVE NO VÁLIDA INTENTE NUEVAMENTE.")
                else:
                    print("ERROR, ENTRADA NO VÁLIDA. INGRESE UNA CLAVE NUMÉRICA VÁLIDA.")
    except Error as e:
        print(e)
    except Exception as e:
        print(f'Se produjo el siguiente error: {e}')

def buscar_servicio_por_nombre():
    try:
        with sqlite3.connect('notascolab.db') as conn:
            mi_cursor = conn.cursor()
            nombre_buscar = input("Ingrese el nombre del servicio a buscar: ")

            mi_cursor.execute('SELECT * FROM servicios WHERE nombreServicio LIKE ?', (f'%{nombre_buscar}%',))
            servicios_encontrados = mi_cursor.fetchall()

            if not servicios_encontrados:
                print(f"No se encontraron servicios con el nombre '{nombre_buscar}'.")
                return

            table = PrettyTable()
            table.field_names = ["Clave", "Nombre", "Costo"]

            for clave, nombreServicio, costo in servicios_encontrados:
                table.add_row([clave, nombreServicio, costo])

            print("\nServicios encontrados:")
            print(table)
    except Error as e:
        print(e)
    except Exception as e:
        print(f'Se produjo el siguiente error: {e}')

def agregar_servicio():
    while True:
        print('\n   AGREGAR UN NUEVO SERVICIO')
        print('\nNota: Escriba (salir) si desea volver al menú principal')

        while True:
            servicio = input('\nIngrese el nombre del servicio: ')
            if servicio.strip() == '':
                print("ERROR, EL NOMBRE DEL SERVICIO NO PUEDE OMITIRSE")
            else:
                break

        if servicio.lower() == 'salir':
            return

        while True:
            costo = input("Ingrese el costo del servicio: ")
            try:
                costo = float(costo)
                if costo <= 0.0:
                    print("ERROR, EL COSTO DEL SERVICIO DEBE SER MAYOR A 0.0")
                else:
                    break
            except ValueError:
                print("ERROR, EL COSTO DEL SERVICIO DEBE SER UN NÚMERO MAYOR A 0.0")

        try:
            with sqlite3.connect('/content/tallermecanico.db') as conn:
                mi_cursor = conn.cursor()
                mi_cursor.execute('SELECT MAX(IdServicio) FROM servicios')
                max_id = mi_cursor.fetchone()[0] or 0
                nuevo_id = max_id + 1
                datos = (nuevo_id, servicio, costo)
                mi_cursor.execute('INSERT INTO servicios (IdServicio, nombre, costo) VALUES (?, ?, ?)', datos)
                conn.commit()
                print(f'\nEl servicio "{servicio}" se ha registrado correctamente con ID {nuevo_id}')
        except Exception as e:
            print(f'Se produjo el siguiente error: {e}')
        finally:
            conn.close()

        opcion = input('\n¿Desea agregar otro servicio? (S)i (N)o: ')
        if opcion.lower() != 's':
            return

def menu_principal():
    while True:
        print('---------------------------------------')
        print('  BIENVENIDO AL MENU PRINCIPAL   ')
        print('---------------------------------------')
        print('1. Notas')
        print('2. Clientes')
        print('3. Servicios')
        print('4. Salir')
        opcion = input("Ingrese el número de la opción que desea: ")
        if opcion.isdigit():
            opcion = int(opcion)
            if opcion == 1:
                print("Entraste al menú de notas")
                menu_notas()
            elif opcion == 2:
                print("Entraste al menú de clientes")
                menu_clientes()
            elif opcion == 3:
                print("Entraste a Servicios")
                menu_servicio()
            elif opcion == 4:
                respuesta = input("¿Desea salir? (S/N) ")
                if respuesta == 'S':
                    break
            else:
                print("Opción no válida. Por favor, elige una opción válida.")
        else:
            print("Opción no válida. Por favor, elige una opción válida.")

menu_principal()